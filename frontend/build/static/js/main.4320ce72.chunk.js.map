{"version":3,"sources":["Home.jsx","serviceWorker.js","index.js"],"names":["Home","match","useState","data","setData","error","setError","modalVisible","setModalVisible","event","setEvent","registered","setRegistered","regData","setRegData","name","setName","email","setEmail","phone","setPhone","useEffect","teamId","window","location","href","split","undefined","fetch","then","r","json","catch","err","console","log","e","avpos","map","d","className","key","date","time","count","onClick","join","id","type","value","onChange","target","placeholder","method","headers","body","JSON","stringify","timeId","style","margin","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4320ce72.chunk.js","sourcesContent":["import React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\n\nimport './home.css'\n\nconst Home = ({match}) => {\n    \n    let backend = 'http://localhost'\n    \n    const [data, setData] = useState(null)\n    const [error, setError] = useState(false)\n    const [modalVisible, setModalVisible] = useState(false)\n    const [event, setEvent] = useState(null)\n    const [registered, setRegistered] = useState(false)\n    const [regData, setRegData] = useState(null)\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [phone, setPhone] = useState('')\n\n    const attend = () => {\n        fetch(`${backend}/api/attend/${event}/`, {method: 'POST', headers: {'Content-Type': 'Application/JSON'}, body: JSON.stringify({name, email, phone, timeId: event})}).then(r => r.json()).then(r => {\n            setModalVisible(false)\n            if (r.error) {\n                setError(true)\n            } else {\n                setRegData(r)\n                setRegistered(true)\n            }\n        })\n    }\n\n    const join = (event) => {\n        setModalVisible(true)\n        setEvent(event)\n    }\n    \n    useEffect(() => {\n        try {\n            let teamId = window.location.href.split('?')[1].split('=')[1]        \n            if (teamId === undefined) {\n                throw 'Undefined team'\n            }\n            fetch(`${backend}/api/team/${teamId}/`).then(r => r.json()).then(r => {\n                if (r.error) {\n                    setError(true)\n                } else {\n                    setData(r)\n                }\n            }).catch(err => {\n                console.log(err)\n                setError(true)\n            })\n\n        } catch (e) {\n            console.log(e)\n            setError(true)\n        }\n    }, [])\n    \n    \n\n    let avpos = undefined\n\n    if (data !== null) {\n        avpos = data.map(d => {\n            return <div className={'cont'} key={d.date + d.time}>\n                <h5>{d.name}</h5>\n                <p>\n                    {d.date}: {d.time}\n                </p>\n                <p>Ledige plasser: {d.count}</p>\n                \n                <div>\n                    <button onClick={() => join(d.id)}>Meld på</button>\n                </div>\n            </div>\n        })\n    }\n\n    if (modalVisible && event) {\n        return <div>\n                <div>\n                    <button onClick={() => {setModalVisible(false)}}>Tilbake</button>\n                </div>\n                <div className={'wrapper'}>\n                    <h2>Nesten ferdig, vi trenger bare litt mer informasjon!</h2>\n                    <div>\n                        <input type={'text'} value={name} onChange={(e) => setName(e.target.value)} placeholder={'Name'} />\n                    </div>\n                    <div>\n                        <input type={'email'} value={email} onChange={(e) => setEmail(e.target.value)} placeholder={'Email'} />\n                    </div>\n                    <div>\n                        <input type={'text'} value={phone} onChange={(e) => setPhone(e.target.value)} placeholder={'Phone'} />\n                    </div>\n                    <div>\n                        <button onClick={attend}>Meld på</button>\n                    </div>\n                    <p>Dataen vil bli slettet etter tryouts</p>\n                </div>\n        </div>\n        \n    }\n\n    if (registered) {\n        \n        return <div className={'wrapper'}>\n            <h2>Du er nå påmeldt</h2>\n            <p>{regData.email} at {regData.date} kl. {regData.time}</p>\n        </div>\n    }\n\n    return <div>\n        \n        <div className=\"wrapper\">\n        <h1>Velkommen til tryouts med NTNUI Basket</h1>\n\n    </div>\n\n    {error && <div className=\"wrapper\" id=\"error\">\n        <h2>Det skjedde en feil? Kan du sende en mail til <a href=\"mailto: jakob.johannessen@ntnui.no\">jakob.johannessen@ntnui.no</a> </h2>\n    </div>}\n\n    {data === null &! error ?\n    <div className=\"wrapper\" id=\"content\">\n        <p>Vi tar deg straks til siden hvor du kan velge når du vil på tryouts!</p>\n        <p>Loading...</p>\n    </div> : null}\n\n    {data !== undefined &! error ?\n    <div className='wrapper'>\n        <h3 style={{margin: '1em'}}>Velg tid for tryouts</h3>\n        <div className={'midwrap'}>\n            {avpos}\n        </div>\n    </div> : null}\n\n    <div className=\"wrapper\">\n        <p>Made in a rush by <a href=\"https://ntnui.no/basket\">NTNUI Basket</a></p>\n\n    </div>\n    </div>\n}\n\nexport default Home","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}